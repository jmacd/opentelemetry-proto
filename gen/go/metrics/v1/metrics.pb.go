// Copyright 2019, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.9.1
// source: opentelemetry/jmacd/proto/metrics/v1/metrics.proto

package v1

import (
	proto "github.com/golang/protobuf/proto"
	v11 "github.com/jmacd/opentelemetry-proto/gen/go/common/v1"
	v1 "github.com/jmacd/opentelemetry-proto/gen/go/resource/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// ValueType is the type of values a metric has.  ValueType determines
// which field of the DataPoint will be used for Metrics with this
// descriptor.
type MetricDescriptor_ValueType int32

const (
	// INVALID_TYPE is the default ValueType, it MUST not be used.
	MetricDescriptor_INVALID_VALUE_TYPE MetricDescriptor_ValueType = 0
	// ScalarInt64 implies that Metric.Points MUST use DataPoint.value_int64.
	MetricDescriptor_SCALAR_INT64 MetricDescriptor_ValueType = 2
	// ScalarDouble implies that Metric.Points MUST use DataPoint.value_double.
	MetricDescriptor_SCALAR_DOUBLE MetricDescriptor_ValueType = 3
	// HistogramInt64 implies that Metric.Points MUST use
	// DataPoint.histogram with int64 boundaries.
	MetricDescriptor_HISTOGRAM_INT64 MetricDescriptor_ValueType = 4
	// HistogramDouble implies that Metric.Points MUST use
	// DataPoint.histogram with floating point boundaries.
	MetricDescriptor_HISTOGRAM_DOUBLE MetricDescriptor_ValueType = 5
	// SummaryInt64 implies that Metric.Points MUST use DataPoint.summary
	// with int64 min/max/sum/last/count values.
	MetricDescriptor_SUMMARY_INT64 MetricDescriptor_ValueType = 6
	// SummaryDouble implies that Metric.Points MUST use
	// DataPoint.summary with double min/max/sum/last/count values.
	MetricDescriptor_SUMMARY_DOUBLE MetricDescriptor_ValueType = 7
	// RawInt64 implies that Metric.Points MUST use DataPoint.raw with
	// int64 values.
	MetricDescriptor_RAW_INT64 MetricDescriptor_ValueType = 8
	// RawDouble implies that Metric.Points MUST use DataPoint.raw with
	// double value.
	MetricDescriptor_RAW_DOUBLE MetricDescriptor_ValueType = 9
)

// Enum value maps for MetricDescriptor_ValueType.
var (
	MetricDescriptor_ValueType_name = map[int32]string{
		0: "INVALID_VALUE_TYPE",
		2: "SCALAR_INT64",
		3: "SCALAR_DOUBLE",
		4: "HISTOGRAM_INT64",
		5: "HISTOGRAM_DOUBLE",
		6: "SUMMARY_INT64",
		7: "SUMMARY_DOUBLE",
		8: "RAW_INT64",
		9: "RAW_DOUBLE",
	}
	MetricDescriptor_ValueType_value = map[string]int32{
		"INVALID_VALUE_TYPE": 0,
		"SCALAR_INT64":       2,
		"SCALAR_DOUBLE":      3,
		"HISTOGRAM_INT64":    4,
		"HISTOGRAM_DOUBLE":   5,
		"SUMMARY_INT64":      6,
		"SUMMARY_DOUBLE":     7,
		"RAW_INT64":          8,
		"RAW_DOUBLE":         9,
	}
)

func (x MetricDescriptor_ValueType) Enum() *MetricDescriptor_ValueType {
	p := new(MetricDescriptor_ValueType)
	*p = x
	return p
}

func (x MetricDescriptor_ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricDescriptor_ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_enumTypes[0].Descriptor()
}

func (MetricDescriptor_ValueType) Type() protoreflect.EnumType {
	return &file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_enumTypes[0]
}

func (x MetricDescriptor_ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricDescriptor_ValueType.Descriptor instead.
func (MetricDescriptor_ValueType) EnumDescriptor() ([]byte, []int) {
	return file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{3, 0}
}

// KindElement contains a set of bit masks used to construct Kind enum values.
// There are 7 bits used presently, broken into groups:
//
//   Temporality is the temporal quality values of a metric have. It
//   describes how those values relate to the time interval over
//   which they are reported.  One of the 3 Temporality values
//   (CUMULATIVE, DELTA, INSTANTANEOUS) MUST be set.
//
//   Structure indicates whether metric data describes a sum of
//   measurements (ADDING) or a collection of individual
//   measurements (GROUPING).  Value types may be interpreted
//   differently depending on Structure.  For example, a Histogram
//   DataPoint may be computed for a Counter (ADDING) instrument
//   or a ValueRecorder (GROUPING) instrument, and:
//
//   - ADDING Histograms define a meaningful Sum in the form of a
//     distribution of constituent measurements.
//   - GROUPING Histograms define a distribution of measurements,
//     where the sum is potentially not meaningful.  If also
//     SYNCHRONOUS, these data points define a rate in terms of
//     their Count.
//
//   Monotonicity applies only to ADDING data points.  When set,
//   MONOTONIC indicates that the calculated sum can be monitored as
//   a rate of change.  Observers of MONOTONIC metrics should never
//   see the value decrease without a reset (i.e., StartTimeUnixNano
//   advances), otherwise a decreasing MONOTONIC metric suggests an
//   SDK bug.
//
//   Synchronicity applies to data points produced when the
//   application called the API, as opposed to the SDK calling the
//   application via a callback.  When set, SYNCHRONOUS indicates
//   that there may be an associated trace context.  The rate of
//   synchronous events has a meaningful interpretation, when
//   considering the DataPoint.Histogram.Count or
//   DataPoint.Summary.Count fields, as these are true
//   application-level events.
//
//   Data points without SYNCHRONOUS are considered asynchronous.
//   The DataPoint.Histogram.Count and DataPoint.Summary.Count
//   fields record a number of observations, which is controlled
//   both by the number of distinct label sets observed and by the
//   rate of collection.  Because asynchronous metric Count fields
//   depend on the rate of collection, the rate of these metrics
//   should not be interpreted as rates (however these Counts may
//   still be used to form an average value of these metrics).
type MetricDescriptor_KindElement int32

const (
	// INVALID_KIND_MASK is not used.
	MetricDescriptor_INVALID_KIND_MASK MetricDescriptor_KindElement = 0
	// INSTANTANEOUS is a metric whose values are measured at a particular
	// instant. The values are not aggregated over any time interval and are
	// unique per timestamp. As such, these metrics are not expected to have
	// an associated start time.
	MetricDescriptor_INSTANTANEOUS MetricDescriptor_KindElement = 1
	// DELTA is a metric whose values are the aggregation of measurements
	// made over a time interval. Successive metrics contain aggregation of
	// values from continuous and non-overlapping intervals.
	//
	// The values for a DELTA metric are based only on the time interval
	// associated with one measurement cycle. There is no dependency on
	// previous measurements like is the case for CUMULATIVE metrics.
	//
	// For example, consider a system measuring the number of requests that
	// it receives and reports the sum of these requests every second as a
	// DELTA metric:
	//
	//   1. The system starts receiving at time=t_0.
	//   2. A request is received, the system measures 1 request.
	//   3. A request is received, the system measures 1 request.
	//   4. A request is received, the system measures 1 request.
	//   5. The 1 second collection cycle ends. A metric is exported for the
	//      number of requests received over the interval of time t_0 to
	//      t_0+1 with a value of 3.
	//   6. A request is received, the system measures 1 request.
	//   7. A request is received, the system measures 1 request.
	//   8. The 1 second collection cycle ends. A metric is exported for the
	//      number of requests received over the interval of time t_0+1 to
	//      t_0+2 with a value of 2.
	MetricDescriptor_DELTA MetricDescriptor_KindElement = 4
	// CUMULATIVE is a metric whose values are the aggregation of
	// successively made measurements from a fixed start time until the last
	// reported measurement. This means that current values of a CUMULATIVE
	// metric depend on all previous measurements since the start time.
	// Because of this, the sender is required to retain this state in some
	// form. If this state is lost or invalidated, the CUMULATIVE metric
	// values MUST be reset and a new fixed start time following the last
	// reported measurement time sent MUST be used.
	//
	// For example, consider a system measuring the number of requests that
	// it receives and reports the sum of these requests every second as a
	// CUMULATIVE metric:
	//
	//   1. The system starts receiving at time=t_0.
	//   2. A request is received, the system measures 1 request.
	//   3. A request is received, the system measures 1 request.
	//   4. A request is received, the system measures 1 request.
	//   5. The 1 second collection cycle ends. A metric is exported for the
	//      number of requests received over the interval of time t_0 to
	//      t_0+1 with a value of 3.
	//   6. A request is received, the system measures 1 request.
	//   7. A request is received, the system measures 1 request.
	//   8. The 1 second collection cycle ends. A metric is exported for the
	//      number of requests received over the interval of time t_0 to
	//      t_0+2 with a value of 5.
	//   9. The system experiences a fault and loses state.
	//   10. The system recovers and resumes receiving at time=t_1.
	//   11. A request is received, the system measures 1 request.
	//   12. The 1 second collection cycle ends. A metric is exported for the
	//      number of requests received over the interval of time t_1 to
	//      t_0+1 with a value of 1.
	MetricDescriptor_CUMULATIVE MetricDescriptor_KindElement = 2
	// GROUPING structure means the value has been computed by combining
	// individual values in a meaningful aggregation.  GROUPING structure
	// implies the sum of
	MetricDescriptor_GROUPING MetricDescriptor_KindElement = 8
	// ADDING structure means the measurement determines a sum.  For
	// DELTA kind this is expressed as the change in sum since the
	// last collection.  For CUMULATIVE kind this is express as last
	// collected value of the sum.
	MetricDescriptor_ADDING MetricDescriptor_KindElement = 16
	// MONOTONIC may be set in conjunction with ADDING kinds, implying
	// that the sum determines a meaningful rate.  For DELTA kind,
	// this implies non-negative value series.  For CUMULATIVE kind,
	// this implies a non-decreasing value series.
	MetricDescriptor_MONOTONIC MetricDescriptor_KindElement = 32
	// SYNCHRONOUS may be set for any kind of metric, indicating it was generated
	// through synchronous events in which the application calls the API.  If
	// SYNCHRONOUS is not set, it implies the event originated in a callback
	// where the SDK called the application.
	MetricDescriptor_SYNCHRONOUS MetricDescriptor_KindElement = 64
)

// Enum value maps for MetricDescriptor_KindElement.
var (
	MetricDescriptor_KindElement_name = map[int32]string{
		0:  "INVALID_KIND_MASK",
		1:  "INSTANTANEOUS",
		4:  "DELTA",
		2:  "CUMULATIVE",
		8:  "GROUPING",
		16: "ADDING",
		32: "MONOTONIC",
		64: "SYNCHRONOUS",
	}
	MetricDescriptor_KindElement_value = map[string]int32{
		"INVALID_KIND_MASK": 0,
		"INSTANTANEOUS":     1,
		"DELTA":             4,
		"CUMULATIVE":        2,
		"GROUPING":          8,
		"ADDING":            16,
		"MONOTONIC":         32,
		"SYNCHRONOUS":       64,
	}
)

func (x MetricDescriptor_KindElement) Enum() *MetricDescriptor_KindElement {
	p := new(MetricDescriptor_KindElement)
	*p = x
	return p
}

func (x MetricDescriptor_KindElement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricDescriptor_KindElement) Descriptor() protoreflect.EnumDescriptor {
	return file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_enumTypes[1].Descriptor()
}

func (MetricDescriptor_KindElement) Type() protoreflect.EnumType {
	return &file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_enumTypes[1]
}

func (x MetricDescriptor_KindElement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricDescriptor_KindElement.Descriptor instead.
func (MetricDescriptor_KindElement) EnumDescriptor() ([]byte, []int) {
	return file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{3, 1}
}

// Kind explains how the DataPoint was produced (Structure), how
// the point was aggregated with resepect to time (Temporality), and
// whether it was computed synchronously, and when the Structure is
// ADDING, whether the captured Sum is also monotonic.
//
// Kind names are generated from valid combinations of KindElement
// by joining the effective KindElements using underscores.  There
// are:
//
// - 3 possibilities for Temporality
// - 2 possibilities for Synchronous/Asynchronous
// - 3 possibilities for Structure/Monotonicity: Grouping, Adding
//   Monotonic, and Adding (not monotonic)
//
// This makes 18 valid values.
type MetricDescriptor_Kind int32

const (
	// INVALID_KIND is the default Kind, it MUST not be used.
	MetricDescriptor_INVALID_KIND                                MetricDescriptor_Kind = 0
	MetricDescriptor_ADDING_MONOTONIC_INSTANTANEOUS_SYNCHRONOUS  MetricDescriptor_Kind = 113
	MetricDescriptor_ADDING_MONOTONIC_INSTANTANEOUS_ASYNCHRONOUS MetricDescriptor_Kind = 49
	MetricDescriptor_ADDING_MONOTONIC_CUMULATIVE_SYNCHRONOUS     MetricDescriptor_Kind = 114
	MetricDescriptor_ADDING_MONOTONIC_CUMULATIVE_ASYNCHRONOUS    MetricDescriptor_Kind = 50
	MetricDescriptor_ADDING_MONOTONIC_DELTA_SYNCHRONOUS          MetricDescriptor_Kind = 116
	MetricDescriptor_ADDING_MONOTONIC_DELTA_ASYNCHRONOUS         MetricDescriptor_Kind = 52
	MetricDescriptor_ADDING_INSTANTANEOUS_SYNCHRONOUS            MetricDescriptor_Kind = 81
	MetricDescriptor_ADDING_INSTANTANEOUS_ASYNCHRONOUS           MetricDescriptor_Kind = 17
	MetricDescriptor_ADDING_CUMULATIVE_SYNCHRONOUS               MetricDescriptor_Kind = 82
	MetricDescriptor_ADDING_CUMULATIVE_ASYNCHRONOUS              MetricDescriptor_Kind = 18
	MetricDescriptor_ADDING_DELTA_SYNCHRONOUS                    MetricDescriptor_Kind = 84
	MetricDescriptor_ADDING_DELTA_ASYNCHRONOUS                   MetricDescriptor_Kind = 20
	MetricDescriptor_GROUPING_INSTANTANEOUS_SYNCHRONOUS          MetricDescriptor_Kind = 73
	MetricDescriptor_GROUPING_INSTANTANEOUS_ASYNCHRONOUS         MetricDescriptor_Kind = 9
	MetricDescriptor_GROUPING_CUMULATIVE_SYNCHRONOUS             MetricDescriptor_Kind = 74
	MetricDescriptor_GROUPING_CUMULATIVE_ASYNCHRONOUS            MetricDescriptor_Kind = 10
	MetricDescriptor_GROUPING_DELTA_SYNCHRONOUS                  MetricDescriptor_Kind = 76
	MetricDescriptor_GROUPING_DELTA_ASYNCHRONOUS                 MetricDescriptor_Kind = 12
)

// Enum value maps for MetricDescriptor_Kind.
var (
	MetricDescriptor_Kind_name = map[int32]string{
		0:   "INVALID_KIND",
		113: "ADDING_MONOTONIC_INSTANTANEOUS_SYNCHRONOUS",
		49:  "ADDING_MONOTONIC_INSTANTANEOUS_ASYNCHRONOUS",
		114: "ADDING_MONOTONIC_CUMULATIVE_SYNCHRONOUS",
		50:  "ADDING_MONOTONIC_CUMULATIVE_ASYNCHRONOUS",
		116: "ADDING_MONOTONIC_DELTA_SYNCHRONOUS",
		52:  "ADDING_MONOTONIC_DELTA_ASYNCHRONOUS",
		81:  "ADDING_INSTANTANEOUS_SYNCHRONOUS",
		17:  "ADDING_INSTANTANEOUS_ASYNCHRONOUS",
		82:  "ADDING_CUMULATIVE_SYNCHRONOUS",
		18:  "ADDING_CUMULATIVE_ASYNCHRONOUS",
		84:  "ADDING_DELTA_SYNCHRONOUS",
		20:  "ADDING_DELTA_ASYNCHRONOUS",
		73:  "GROUPING_INSTANTANEOUS_SYNCHRONOUS",
		9:   "GROUPING_INSTANTANEOUS_ASYNCHRONOUS",
		74:  "GROUPING_CUMULATIVE_SYNCHRONOUS",
		10:  "GROUPING_CUMULATIVE_ASYNCHRONOUS",
		76:  "GROUPING_DELTA_SYNCHRONOUS",
		12:  "GROUPING_DELTA_ASYNCHRONOUS",
	}
	MetricDescriptor_Kind_value = map[string]int32{
		"INVALID_KIND": 0,
		"ADDING_MONOTONIC_INSTANTANEOUS_SYNCHRONOUS":  113,
		"ADDING_MONOTONIC_INSTANTANEOUS_ASYNCHRONOUS": 49,
		"ADDING_MONOTONIC_CUMULATIVE_SYNCHRONOUS":     114,
		"ADDING_MONOTONIC_CUMULATIVE_ASYNCHRONOUS":    50,
		"ADDING_MONOTONIC_DELTA_SYNCHRONOUS":          116,
		"ADDING_MONOTONIC_DELTA_ASYNCHRONOUS":         52,
		"ADDING_INSTANTANEOUS_SYNCHRONOUS":            81,
		"ADDING_INSTANTANEOUS_ASYNCHRONOUS":           17,
		"ADDING_CUMULATIVE_SYNCHRONOUS":               82,
		"ADDING_CUMULATIVE_ASYNCHRONOUS":              18,
		"ADDING_DELTA_SYNCHRONOUS":                    84,
		"ADDING_DELTA_ASYNCHRONOUS":                   20,
		"GROUPING_INSTANTANEOUS_SYNCHRONOUS":          73,
		"GROUPING_INSTANTANEOUS_ASYNCHRONOUS":         9,
		"GROUPING_CUMULATIVE_SYNCHRONOUS":             74,
		"GROUPING_CUMULATIVE_ASYNCHRONOUS":            10,
		"GROUPING_DELTA_SYNCHRONOUS":                  76,
		"GROUPING_DELTA_ASYNCHRONOUS":                 12,
	}
)

func (x MetricDescriptor_Kind) Enum() *MetricDescriptor_Kind {
	p := new(MetricDescriptor_Kind)
	*p = x
	return p
}

func (x MetricDescriptor_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricDescriptor_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_enumTypes[2].Descriptor()
}

func (MetricDescriptor_Kind) Type() protoreflect.EnumType {
	return &file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_enumTypes[2]
}

func (x MetricDescriptor_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricDescriptor_Kind.Descriptor instead.
func (MetricDescriptor_Kind) EnumDescriptor() ([]byte, []int) {
	return file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{3, 2}
}

// A collection of InstrumentationLibraryMetrics from a Resource.
type ResourceMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource for the metrics in this message.
	// If this field is not set then no resource info is known.
	Resource *v1.Resource `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// A list of metrics that originate from a resource.
	InstrumentationLibraryMetrics []*InstrumentationLibraryMetrics `protobuf:"bytes,2,rep,name=instrumentation_library_metrics,json=instrumentationLibraryMetrics,proto3" json:"instrumentation_library_metrics,omitempty"`
}

func (x *ResourceMetrics) Reset() {
	*x = ResourceMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceMetrics) ProtoMessage() {}

func (x *ResourceMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceMetrics.ProtoReflect.Descriptor instead.
func (*ResourceMetrics) Descriptor() ([]byte, []int) {
	return file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{0}
}

func (x *ResourceMetrics) GetResource() *v1.Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *ResourceMetrics) GetInstrumentationLibraryMetrics() []*InstrumentationLibraryMetrics {
	if x != nil {
		return x.InstrumentationLibraryMetrics
	}
	return nil
}

// A collection of Metrics produced by an InstrumentationLibrary.
type InstrumentationLibraryMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The instrumentation library information for the metrics in this message.
	// If this field is not set then no library info is known.
	InstrumentationLibrary *v11.InstrumentationLibrary `protobuf:"bytes,1,opt,name=instrumentation_library,json=instrumentationLibrary,proto3" json:"instrumentation_library,omitempty"`
	// A list of metrics that originate from an instrumentation library.
	Metrics []*Metric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *InstrumentationLibraryMetrics) Reset() {
	*x = InstrumentationLibraryMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentationLibraryMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentationLibraryMetrics) ProtoMessage() {}

func (x *InstrumentationLibraryMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentationLibraryMetrics.ProtoReflect.Descriptor instead.
func (*InstrumentationLibraryMetrics) Descriptor() ([]byte, []int) {
	return file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{1}
}

func (x *InstrumentationLibraryMetrics) GetInstrumentationLibrary() *v11.InstrumentationLibrary {
	if x != nil {
		return x.InstrumentationLibrary
	}
	return nil
}

func (x *InstrumentationLibraryMetrics) GetMetrics() []*Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// Metric contains one or more timeseries.
//
// The data model and relation between entities is shown in the diagram below.
//
// - Metric is composed of a MetricDescriptor and a list of data points.
// - MetricDescriptor contains a name, description, unit, kind, and value type.
// - Points is a list of DataPoints (shown vertically).
// - DataPoint contains timestamps, labels, and one of the value type fields.
//
//     Metric
//  +----------+         +------------------------+
//  |descriptor|-------->| MetricDescriptor       |
//  |          |         | name                   |
//  |          |         | description            |
//  |          |         | unit                   |
//  |    points|--+      | kind                   |
//  +----------+  |      | value type             |
//                |      +------------------------+
//                |
//                |      +---------------------------+
//                |      |DataPoint 1                |
//                v      |+------+------+   +------+ |
//             +-----+   ||label |label |...|label | |
//             |  1  |-->||value1|value2|...|valueN| |
//             +-----+   |+------+------+   +------+ |
//             |  .  |   |+-----+                    |
//             |  .  |   ||value|                    |
//             |  .  |   |+-----+                    |
//             |  .  |   +---------------------------+
//             |  .  |                   .
//             |  .  |                   .
//             |  .  |                   .
//             |  .  |   +---------------------------+
//             |  .  |   |DataPoint M                |
//             +-----+   |+------+------+   +------+ |
//             |  M  |-->||label |label |...|label | |
//             +-----+   ||value1|value2|...|valueN| |
//                       |+------+------+   +------+ |
//                       |+-----+                    |
//                       ||value|                    |
//                       |+-----+                    |
//                       +---------------------------+
//
//-----------------------------------------------------------------------
// DataPoint is a general type that includes three common fields:
// - Labels are the optional key-value pairs associated with the data point.
// - StartTimeUnixNano MUST be set to the start of the interval when the
//   descriptor kind includes CUMULATIVE or DELTA.  This field is not set
//   for INSTANTANEOUS timeseries, where instead the TimeUnixNano field is
//   set for individual points.
// - TimeUnixNano MUST be set to:
//   - the end of the interval (CUMULATIVE or DELTA)
//   - the instantaneous time of the event (INSTANTANEOUS).
//
// DataPoint values are strongly typed: each DataPoint uses a specific field
// depending on the value type of the metric.  The scalar value types
// (SCALAR_INT64, SCALAR_DOUBLE) use fields of the DataPoint directly, while
// there are currently 3 DataPoint sub-messages (Histogram, Summary, RawValue).
type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Descriptor describes the Metric.
	Descriptor_ *MetricDescriptor `protobuf:"bytes,1,opt,name=descriptor,proto3" json:"descriptor,omitempty"`
	// Points is a list of one or more DataPoints for a single metric.
	Points []*DataPoint `protobuf:"bytes,2,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *Metric) Reset() {
	*x = Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{2}
}

func (x *Metric) GetDescriptor_() *MetricDescriptor {
	if x != nil {
		return x.Descriptor_
	}
	return nil
}

func (x *Metric) GetPoints() []*DataPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

// Defines a metric type and its schema.
type MetricDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the metric, including its DNS name prefix. It must be unique.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the metric, which can be used in documentation.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Unit in which the metric value is reported. Follows the format
	// described by http://unitsofmeasure.org/ucum.html.
	Unit string `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	// ValueType is the type of values this metric has.
	ValueType MetricDescriptor_ValueType `protobuf:"varint,4,opt,name=value_type,json=valueType,proto3,enum=opentelemetry.jmacd.proto.metrics.v1.MetricDescriptor_ValueType" json:"value_type,omitempty"`
	// Kind describes properties of the Metric that are necessary to
	// interpret the data and/or describe how it was produced.
	Kind MetricDescriptor_Kind `protobuf:"varint,5,opt,name=kind,proto3,enum=opentelemetry.jmacd.proto.metrics.v1.MetricDescriptor_Kind" json:"kind,omitempty"`
}

func (x *MetricDescriptor) Reset() {
	*x = MetricDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricDescriptor) ProtoMessage() {}

func (x *MetricDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricDescriptor.ProtoReflect.Descriptor instead.
func (*MetricDescriptor) Descriptor() ([]byte, []int) {
	return file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{3}
}

func (x *MetricDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricDescriptor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MetricDescriptor) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *MetricDescriptor) GetValueType() MetricDescriptor_ValueType {
	if x != nil {
		return x.ValueType
	}
	return MetricDescriptor_INVALID_VALUE_TYPE
}

func (x *MetricDescriptor) GetKind() MetricDescriptor_Kind {
	if x != nil {
		return x.Kind
	}
	return MetricDescriptor_INVALID_KIND
}

// DataPoint is a point of raw or aggregate metric data, generally containing
// the labels, one or two timestamps, and a single value field.  The value field
// that is used is determined by the descriptor ValueType.
type DataPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of labels that uniquely identify this timeseries.
	Labels []*v11.StringKeyValue `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	// start_time_unix_nano is the start of the interval for which a CUMULATIVE or
	// DELTA kind of metric was computed.
	// reset.
	//
	// This field is ignored for INSTANTANEOUS metric kinds and SHOULD not be set.
	//
	// The CUMULATIVE or DELTA value is over the time interval (start_time_unix_nano, time_unix_nano].
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	//
	// TODO: Can we omit this when all metrics in a report share the same start time?
	StartTimeUnixNano uint64 `protobuf:"fixed64,2,opt,name=start_time_unix_nano,json=startTimeUnixNano,proto3" json:"start_time_unix_nano,omitempty"`
	// time_unix_nano is the end of the interval for CUMULATIVE and DELTA kinds,
	// or it is the event timestamp for INSTANTANEOUS kinds.
	//
	// TODO: Can we omit this when a non-instantaneous metric has the same end time
	// as others in the report?
	TimeUnixNano uint64 `protobuf:"fixed64,3,opt,name=time_unix_nano,json=timeUnixNano,proto3" json:"time_unix_nano,omitempty"`
	// SCALAR_INT64 uses this field.
	ValueInt64 int64 `protobuf:"varint,4,opt,name=value_int64,json=valueInt64,proto3" json:"value_int64,omitempty"`
	// SCALAR_DOUBLE uses this field.
	ValueDouble float64 `protobuf:"fixed64,5,opt,name=value_double,json=valueDouble,proto3" json:"value_double,omitempty"`
	// HISTOGRAM_INT64 and HISTOGRAM_DOUBLE use this field.
	Histogram *Histogram `protobuf:"bytes,6,opt,name=histogram,proto3" json:"histogram,omitempty"`
	// SUMMARY_INT64 and SUMMARY_DOUBLE use this field.
	Summary *Summary `protobuf:"bytes,7,opt,name=summary,proto3" json:"summary,omitempty"`
	// RAW_INT64 and RAW_DOUBLE use this field.  Do not set "exemplars" when reporting
	// raw values, as exemplars can be computed by the receiver when in that case.
	RawValues []*RawValue `protobuf:"bytes,8,rep,name=raw_values,json=rawValues,proto3" json:"raw_values,omitempty"`
	// Exemplars are set alongside value_int64, value_double, histogram,
	// and summary fields, in which case the exemplars carry additional
	// information, including the full label set, exact timestamp,
	// optional trace context, and sample count associated with selected
	// events.
	Exemplars []*RawValue `protobuf:"bytes,9,rep,name=exemplars,proto3" json:"exemplars,omitempty"`
}

func (x *DataPoint) Reset() {
	*x = DataPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPoint) ProtoMessage() {}

func (x *DataPoint) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPoint.ProtoReflect.Descriptor instead.
func (*DataPoint) Descriptor() ([]byte, []int) {
	return file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{4}
}

func (x *DataPoint) GetLabels() []*v11.StringKeyValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DataPoint) GetStartTimeUnixNano() uint64 {
	if x != nil {
		return x.StartTimeUnixNano
	}
	return 0
}

func (x *DataPoint) GetTimeUnixNano() uint64 {
	if x != nil {
		return x.TimeUnixNano
	}
	return 0
}

func (x *DataPoint) GetValueInt64() int64 {
	if x != nil {
		return x.ValueInt64
	}
	return 0
}

func (x *DataPoint) GetValueDouble() float64 {
	if x != nil {
		return x.ValueDouble
	}
	return 0
}

func (x *DataPoint) GetHistogram() *Histogram {
	if x != nil {
		return x.Histogram
	}
	return nil
}

func (x *DataPoint) GetSummary() *Summary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *DataPoint) GetRawValues() []*RawValue {
	if x != nil {
		return x.RawValues
	}
	return nil
}

func (x *DataPoint) GetExemplars() []*RawValue {
	if x != nil {
		return x.Exemplars
	}
	return nil
}

// Histogram is a single data point in a timeseries that describes the time-varying
// values of a Histogram. A Histogram contains summary statistics for a population of values,
// it may optionally contain the distribution of those values across a set of buckets.
type Histogram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// count is the number of values in the population. Must be non-negative. This value
	// must be equal to the sum of the "count" fields in buckets if a histogram is provided.
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// sum of the values in the population. If count is zero then this field
	// must be zero. This value must be equal to the sum of the "sum" fields in buckets if
	// a histogram is provided.
	SumInt64  int64   `protobuf:"varint,2,opt,name=sum_int64,json=sumInt64,proto3" json:"sum_int64,omitempty"`
	SumDouble float64 `protobuf:"fixed64,3,opt,name=sum_double,json=sumDouble,proto3" json:"sum_double,omitempty"`
	// buckets is an optional field contains the values of histogram for each bucket.
	//
	// The sum of the values in the buckets "count" field must equal the value in the count field.
	//
	// The number of elements in buckets array must be by one greater than the
	// number of elements in bucket_bounds array.
	//
	// Note: if HistogramDataPoint.bucket_options defines bucket bounds then this field
	// must also be present and number of elements in this field must be equal to the
	// number of buckets defined by bucket_options.
	Buckets []*Histogram_Bucket `protobuf:"bytes,6,rep,name=buckets,proto3" json:"buckets,omitempty"`
	// explicit_bounds specifies buckets with explicitly defined bounds for values.
	// The bucket boundaries are described by "bounds" field.
	//
	// This defines size(bounds) + 1 (= N) buckets. The boundaries for bucket
	// at index i are:
	//
	// [0, bounds[i]) for i == 0
	// [bounds[i-1], bounds[i]) for 0 < i < N-1
	// [bounds[i], +infinity) for i == N-1
	// The values in bounds array must be strictly increasing and > 0.
	//
	// Note: only [a, b) intervals are currently supported for each bucket. If we decides
	// to also support (a, b] intervals we should add support for these by defining a boolean
	// value which decides what type of intervals to use.
	ExplicitBoundsInt64  []int64   `protobuf:"varint,7,rep,packed,name=explicit_bounds_int64,json=explicitBoundsInt64,proto3" json:"explicit_bounds_int64,omitempty"`
	ExplicitBoundsDouble []float64 `protobuf:"fixed64,8,rep,packed,name=explicit_bounds_double,json=explicitBoundsDouble,proto3" json:"explicit_bounds_double,omitempty"`
}

func (x *Histogram) Reset() {
	*x = Histogram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Histogram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Histogram) ProtoMessage() {}

func (x *Histogram) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Histogram.ProtoReflect.Descriptor instead.
func (*Histogram) Descriptor() ([]byte, []int) {
	return file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{5}
}

func (x *Histogram) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Histogram) GetSumInt64() int64 {
	if x != nil {
		return x.SumInt64
	}
	return 0
}

func (x *Histogram) GetSumDouble() float64 {
	if x != nil {
		return x.SumDouble
	}
	return 0
}

func (x *Histogram) GetBuckets() []*Histogram_Bucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *Histogram) GetExplicitBoundsInt64() []int64 {
	if x != nil {
		return x.ExplicitBoundsInt64
	}
	return nil
}

func (x *Histogram) GetExplicitBoundsDouble() []float64 {
	if x != nil {
		return x.ExplicitBoundsDouble
	}
	return nil
}

// Summary is a single data point in a timeseries that describes the time-varying
// values of a Summary metric.
type Summary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Remove the labels, start_time, and time TODO.
	//
	// fields: Add min, max, last fields
	// as described in https://github.com/open-telemetry/oteps/pull/117
	//
	// (Same comment)
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// (Same comment)
	SumInt64  int64   `protobuf:"varint,2,opt,name=sum_int64,json=sumInt64,proto3" json:"sum_int64,omitempty"`
	SumDouble float64 `protobuf:"fixed64,3,opt,name=sum_double,json=sumDouble,proto3" json:"sum_double,omitempty"`
	// MIN, MAX, LAST value
	MinInt64   int64   `protobuf:"varint,4,opt,name=min_int64,json=minInt64,proto3" json:"min_int64,omitempty"`
	MinDouble  float64 `protobuf:"fixed64,5,opt,name=min_double,json=minDouble,proto3" json:"min_double,omitempty"`
	MaxInt64   int64   `protobuf:"varint,6,opt,name=max_int64,json=maxInt64,proto3" json:"max_int64,omitempty"`
	MaxDouble  float64 `protobuf:"fixed64,7,opt,name=max_double,json=maxDouble,proto3" json:"max_double,omitempty"`
	LastInt64  int64   `protobuf:"varint,8,opt,name=last_int64,json=lastInt64,proto3" json:"last_int64,omitempty"`
	LastDouble float64 `protobuf:"fixed64,9,opt,name=last_double,json=lastDouble,proto3" json:"last_double,omitempty"`
	// (Same comment)
	QuantileValues []*Summary_ValueAtQuantile `protobuf:"bytes,10,rep,name=quantile_values,json=quantileValues,proto3" json:"quantile_values,omitempty"`
}

func (x *Summary) Reset() {
	*x = Summary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Summary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Summary) ProtoMessage() {}

func (x *Summary) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Summary.ProtoReflect.Descriptor instead.
func (*Summary) Descriptor() ([]byte, []int) {
	return file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{6}
}

func (x *Summary) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Summary) GetSumInt64() int64 {
	if x != nil {
		return x.SumInt64
	}
	return 0
}

func (x *Summary) GetSumDouble() float64 {
	if x != nil {
		return x.SumDouble
	}
	return 0
}

func (x *Summary) GetMinInt64() int64 {
	if x != nil {
		return x.MinInt64
	}
	return 0
}

func (x *Summary) GetMinDouble() float64 {
	if x != nil {
		return x.MinDouble
	}
	return 0
}

func (x *Summary) GetMaxInt64() int64 {
	if x != nil {
		return x.MaxInt64
	}
	return 0
}

func (x *Summary) GetMaxDouble() float64 {
	if x != nil {
		return x.MaxDouble
	}
	return 0
}

func (x *Summary) GetLastInt64() int64 {
	if x != nil {
		return x.LastInt64
	}
	return 0
}

func (x *Summary) GetLastDouble() float64 {
	if x != nil {
		return x.LastDouble
	}
	return 0
}

func (x *Summary) GetQuantileValues() []*Summary_ValueAtQuantile {
	if x != nil {
		return x.QuantileValues
	}
	return nil
}

type RawValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Numerical value of the measurement that was recorded. Only one of these
	// two fields is used for the data, based on MetricDescriptor.measurement_type
	ValueDouble float64 `protobuf:"fixed64,1,opt,name=value_double,json=valueDouble,proto3" json:"value_double,omitempty"`
	ValueInt64  int64   `protobuf:"varint,2,opt,name=value_int64,json=valueInt64,proto3" json:"value_int64,omitempty"`
	// Exact time that the measurement was recorded
	TimeUnixNano uint64 `protobuf:"fixed64,3,opt,name=time_unix_nano,json=timeUnixNano,proto3" json:"time_unix_nano,omitempty"`
	// Labels that were passed with the measurement, but not included in the DataPoint's labels
	AdditionalLabels []*v11.StringKeyValue `protobuf:"bytes,4,rep,name=additional_labels,json=additionalLabels,proto3" json:"additional_labels,omitempty"`
	// (Optional) Span ID of the current trace
	SpanId []byte `protobuf:"bytes,5,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	// (Optional) Trace ID of the current trace
	TraceId []byte `protobuf:"bytes,6,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// (Optional) When sample_count is non-zero, this exemplar has been chosen in a statistically
	// unbiased way such that the exemplar is representative of `sample_count` individual events
	SampleCount float64 `protobuf:"fixed64,7,opt,name=sample_count,json=sampleCount,proto3" json:"sample_count,omitempty"`
}

func (x *RawValue) Reset() {
	*x = RawValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawValue) ProtoMessage() {}

func (x *RawValue) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawValue.ProtoReflect.Descriptor instead.
func (*RawValue) Descriptor() ([]byte, []int) {
	return file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{7}
}

func (x *RawValue) GetValueDouble() float64 {
	if x != nil {
		return x.ValueDouble
	}
	return 0
}

func (x *RawValue) GetValueInt64() int64 {
	if x != nil {
		return x.ValueInt64
	}
	return 0
}

func (x *RawValue) GetTimeUnixNano() uint64 {
	if x != nil {
		return x.TimeUnixNano
	}
	return 0
}

func (x *RawValue) GetAdditionalLabels() []*v11.StringKeyValue {
	if x != nil {
		return x.AdditionalLabels
	}
	return nil
}

func (x *RawValue) GetSpanId() []byte {
	if x != nil {
		return x.SpanId
	}
	return nil
}

func (x *RawValue) GetTraceId() []byte {
	if x != nil {
		return x.TraceId
	}
	return nil
}

func (x *RawValue) GetSampleCount() float64 {
	if x != nil {
		return x.SampleCount
	}
	return 0
}

// Bucket contains values for a bucket.
type Histogram_Bucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of values in each bucket of the histogram, as described by
	// bucket_options.
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *Histogram_Bucket) Reset() {
	*x = Histogram_Bucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Histogram_Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Histogram_Bucket) ProtoMessage() {}

func (x *Histogram_Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Histogram_Bucket.ProtoReflect.Descriptor instead.
func (*Histogram_Bucket) Descriptor() ([]byte, []int) {
	return file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Histogram_Bucket) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// (Similar comments)
type Summary_ValueAtQuantile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quantile    float64 `protobuf:"fixed64,1,opt,name=quantile,proto3" json:"quantile,omitempty"` // [0,1], if 0 prefer MIN, if 1 prefer MAX.
	ValueInt64  int64   `protobuf:"varint,2,opt,name=value_int64,json=valueInt64,proto3" json:"value_int64,omitempty"`
	ValueDouble float64 `protobuf:"fixed64,3,opt,name=value_double,json=valueDouble,proto3" json:"value_double,omitempty"`
}

func (x *Summary_ValueAtQuantile) Reset() {
	*x = Summary_ValueAtQuantile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Summary_ValueAtQuantile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Summary_ValueAtQuantile) ProtoMessage() {}

func (x *Summary_ValueAtQuantile) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Summary_ValueAtQuantile.ProtoReflect.Descriptor instead.
func (*Summary_ValueAtQuantile) Descriptor() ([]byte, []int) {
	return file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Summary_ValueAtQuantile) GetQuantile() float64 {
	if x != nil {
		return x.Quantile
	}
	return 0
}

func (x *Summary_ValueAtQuantile) GetValueInt64() int64 {
	if x != nil {
		return x.ValueInt64
	}
	return 0
}

func (x *Summary_ValueAtQuantile) GetValueDouble() float64 {
	if x != nil {
		return x.ValueDouble
	}
	return 0
}

var File_opentelemetry_jmacd_proto_metrics_v1_metrics_proto protoreflect.FileDescriptor

var file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_rawDesc = []byte{
	0x0a, 0x32, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f,
	0x6a, 0x6d, 0x61, 0x63, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x6a, 0x6d, 0x61, 0x63, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x30, 0x6f, 0x70, 0x65, 0x6e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x6a, 0x6d, 0x61, 0x63, 0x64, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x6f, 0x70,
	0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x6a, 0x6d, 0x61, 0x63,
	0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xec, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x4b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x6a, 0x6d, 0x61, 0x63, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x1f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x6a, 0x6d,
	0x61, 0x63, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x1d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x22, 0xdd, 0x01, 0x0a, 0x1d, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x74, 0x0a, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x6a, 0x6d, 0x61, 0x63, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x52, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x46, 0x0a, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x6a, 0x6d, 0x61, 0x63, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x22, 0xa9, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x56, 0x0a, 0x0a,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x6a, 0x6d, 0x61, 0x63, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x12, 0x47, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x6a, 0x6d, 0x61, 0x63, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xaf, 0x0a,
	0x0a, 0x10, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x5f, 0x0a, 0x0a,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x40, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x6a, 0x6d, 0x61, 0x63, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x6a, 0x6d, 0x61, 0x63,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xb9,
	0x01, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x49,
	0x4e, 0x54, 0x36, 0x34, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52,
	0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x49, 0x53,
	0x54, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x04, 0x12, 0x14,
	0x0a, 0x10, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x4f, 0x55, 0x42,
	0x4c, 0x45, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x5f,
	0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x55, 0x4d, 0x4d, 0x41,
	0x52, 0x59, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x52,
	0x41, 0x57, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x41,
	0x57, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x09, 0x22, 0x8c, 0x01, 0x0a, 0x0b, 0x4b,
	0x69, 0x6e, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x41, 0x4e, 0x45, 0x4f,
	0x55, 0x53, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x10, 0x04, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x55, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x10, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x4e,
	0x4f, 0x54, 0x4f, 0x4e, 0x49, 0x43, 0x10, 0x20, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59, 0x4e, 0x43,
	0x48, 0x52, 0x4f, 0x4e, 0x4f, 0x55, 0x53, 0x10, 0x40, 0x22, 0xd3, 0x05, 0x0a, 0x04, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d,
	0x4f, 0x4e, 0x4f, 0x54, 0x4f, 0x4e, 0x49, 0x43, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54,
	0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x4f,
	0x55, 0x53, 0x10, 0x71, 0x12, 0x2f, 0x0a, 0x2b, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d,
	0x4f, 0x4e, 0x4f, 0x54, 0x4f, 0x4e, 0x49, 0x43, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54,
	0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x5f, 0x41, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e,
	0x4f, 0x55, 0x53, 0x10, 0x31, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x4d, 0x4f, 0x4e, 0x4f, 0x54, 0x4f, 0x4e, 0x49, 0x43, 0x5f, 0x43, 0x55, 0x4d, 0x55, 0x4c, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x4f, 0x55, 0x53,
	0x10, 0x72, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x4e,
	0x4f, 0x54, 0x4f, 0x4e, 0x49, 0x43, 0x5f, 0x43, 0x55, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x41, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x4f, 0x55, 0x53, 0x10, 0x32,
	0x12, 0x26, 0x0a, 0x22, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x4e, 0x4f, 0x54,
	0x4f, 0x4e, 0x49, 0x43, 0x5f, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x48,
	0x52, 0x4f, 0x4e, 0x4f, 0x55, 0x53, 0x10, 0x74, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x44, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x4e, 0x4f, 0x54, 0x4f, 0x4e, 0x49, 0x43, 0x5f, 0x44, 0x45, 0x4c,
	0x54, 0x41, 0x5f, 0x41, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x4f, 0x55, 0x53, 0x10,
	0x34, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x54, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52,
	0x4f, 0x4e, 0x4f, 0x55, 0x53, 0x10, 0x51, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x44, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x5f,
	0x41, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x4f, 0x55, 0x53, 0x10, 0x11, 0x12, 0x21,
	0x0a, 0x1d, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x55, 0x4d, 0x55, 0x4c, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x4f, 0x55, 0x53, 0x10,
	0x52, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x55, 0x4d, 0x55,
	0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e,
	0x4f, 0x55, 0x53, 0x10, 0x12, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x44, 0x45, 0x4c, 0x54, 0x41, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x4f, 0x55,
	0x53, 0x10, 0x54, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45,
	0x4c, 0x54, 0x41, 0x5f, 0x41, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x4f, 0x55, 0x53,
	0x10, 0x14, 0x12, 0x26, 0x0a, 0x22, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x5f, 0x53, 0x59, 0x4e,
	0x43, 0x48, 0x52, 0x4f, 0x4e, 0x4f, 0x55, 0x53, 0x10, 0x49, 0x12, 0x27, 0x0a, 0x23, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x41, 0x4e,
	0x45, 0x4f, 0x55, 0x53, 0x5f, 0x41, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x4f, 0x55,
	0x53, 0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x55, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x48,
	0x52, 0x4f, 0x4e, 0x4f, 0x55, 0x53, 0x10, 0x4a, 0x12, 0x24, 0x0a, 0x20, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x55, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x41, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x4f, 0x55, 0x53, 0x10, 0x0a, 0x12, 0x1e,
	0x0a, 0x1a, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x54, 0x41,
	0x5f, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x4f, 0x55, 0x53, 0x10, 0x4c, 0x12, 0x1f,
	0x0a, 0x1b, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x54, 0x41,
	0x5f, 0x41, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x4f, 0x55, 0x53, 0x10, 0x0c, 0x22,
	0xa8, 0x04, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4b, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x6a, 0x6d,
	0x61, 0x63, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61,
	0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e,
	0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x6a, 0x6d, 0x61, 0x63, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x12, 0x47, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x6a, 0x6d, 0x61, 0x63, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x4d, 0x0a,
	0x0a, 0x72, 0x61, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x6a, 0x6d, 0x61, 0x63, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x72, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x09,
	0x65, 0x78, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x6a, 0x6d, 0x61, 0x63, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72, 0x73, 0x22, 0xb9, 0x02, 0x0a, 0x09, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x75, 0x6d, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x73, 0x75, 0x6d, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x6a, 0x6d, 0x61, 0x63,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x13, 0x65, 0x78, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x34, 0x0a, 0x16, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x01,
	0x52, 0x14, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x1a, 0x1e, 0x0a, 0x06, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xee, 0x03, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x6d, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x75, 0x6d,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x6d, 0x5f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x75, 0x6d, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1f, 0x0a, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x66, 0x0a, 0x0f,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x6a, 0x6d, 0x61, 0x63, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x74, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x6c, 0x65, 0x52, 0x0e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x1a, 0x71, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x74, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x22, 0xad, 0x02, 0x0a, 0x08, 0x52, 0x61, 0x77, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x60,
	0x0a, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x6a, 0x6d, 0x61, 0x63, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x71, 0x0a, 0x27, 0x69, 0x6f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x6a, 0x6d, 0x61, 0x63,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x42, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a,
	0x6d, 0x61, 0x63, 0x64, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_rawDescOnce sync.Once
	file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_rawDescData = file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_rawDesc
)

func file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_rawDescGZIP() []byte {
	file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_rawDescOnce.Do(func() {
		file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_rawDescData = protoimpl.X.CompressGZIP(file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_rawDescData)
	})
	return file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_rawDescData
}

var file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_goTypes = []interface{}{
	(MetricDescriptor_ValueType)(0),       // 0: opentelemetry.jmacd.proto.metrics.v1.MetricDescriptor.ValueType
	(MetricDescriptor_KindElement)(0),     // 1: opentelemetry.jmacd.proto.metrics.v1.MetricDescriptor.KindElement
	(MetricDescriptor_Kind)(0),            // 2: opentelemetry.jmacd.proto.metrics.v1.MetricDescriptor.Kind
	(*ResourceMetrics)(nil),               // 3: opentelemetry.jmacd.proto.metrics.v1.ResourceMetrics
	(*InstrumentationLibraryMetrics)(nil), // 4: opentelemetry.jmacd.proto.metrics.v1.InstrumentationLibraryMetrics
	(*Metric)(nil),                        // 5: opentelemetry.jmacd.proto.metrics.v1.Metric
	(*MetricDescriptor)(nil),              // 6: opentelemetry.jmacd.proto.metrics.v1.MetricDescriptor
	(*DataPoint)(nil),                     // 7: opentelemetry.jmacd.proto.metrics.v1.DataPoint
	(*Histogram)(nil),                     // 8: opentelemetry.jmacd.proto.metrics.v1.Histogram
	(*Summary)(nil),                       // 9: opentelemetry.jmacd.proto.metrics.v1.Summary
	(*RawValue)(nil),                      // 10: opentelemetry.jmacd.proto.metrics.v1.RawValue
	(*Histogram_Bucket)(nil),              // 11: opentelemetry.jmacd.proto.metrics.v1.Histogram.Bucket
	(*Summary_ValueAtQuantile)(nil),       // 12: opentelemetry.jmacd.proto.metrics.v1.Summary.ValueAtQuantile
	(*v1.Resource)(nil),                   // 13: opentelemetry.jmacd.proto.resource.v1.Resource
	(*v11.InstrumentationLibrary)(nil),    // 14: opentelemetry.jmacd.proto.common.v1.InstrumentationLibrary
	(*v11.StringKeyValue)(nil),            // 15: opentelemetry.jmacd.proto.common.v1.StringKeyValue
}
var file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_depIdxs = []int32{
	13, // 0: opentelemetry.jmacd.proto.metrics.v1.ResourceMetrics.resource:type_name -> opentelemetry.jmacd.proto.resource.v1.Resource
	4,  // 1: opentelemetry.jmacd.proto.metrics.v1.ResourceMetrics.instrumentation_library_metrics:type_name -> opentelemetry.jmacd.proto.metrics.v1.InstrumentationLibraryMetrics
	14, // 2: opentelemetry.jmacd.proto.metrics.v1.InstrumentationLibraryMetrics.instrumentation_library:type_name -> opentelemetry.jmacd.proto.common.v1.InstrumentationLibrary
	5,  // 3: opentelemetry.jmacd.proto.metrics.v1.InstrumentationLibraryMetrics.metrics:type_name -> opentelemetry.jmacd.proto.metrics.v1.Metric
	6,  // 4: opentelemetry.jmacd.proto.metrics.v1.Metric.descriptor:type_name -> opentelemetry.jmacd.proto.metrics.v1.MetricDescriptor
	7,  // 5: opentelemetry.jmacd.proto.metrics.v1.Metric.points:type_name -> opentelemetry.jmacd.proto.metrics.v1.DataPoint
	0,  // 6: opentelemetry.jmacd.proto.metrics.v1.MetricDescriptor.value_type:type_name -> opentelemetry.jmacd.proto.metrics.v1.MetricDescriptor.ValueType
	2,  // 7: opentelemetry.jmacd.proto.metrics.v1.MetricDescriptor.kind:type_name -> opentelemetry.jmacd.proto.metrics.v1.MetricDescriptor.Kind
	15, // 8: opentelemetry.jmacd.proto.metrics.v1.DataPoint.labels:type_name -> opentelemetry.jmacd.proto.common.v1.StringKeyValue
	8,  // 9: opentelemetry.jmacd.proto.metrics.v1.DataPoint.histogram:type_name -> opentelemetry.jmacd.proto.metrics.v1.Histogram
	9,  // 10: opentelemetry.jmacd.proto.metrics.v1.DataPoint.summary:type_name -> opentelemetry.jmacd.proto.metrics.v1.Summary
	10, // 11: opentelemetry.jmacd.proto.metrics.v1.DataPoint.raw_values:type_name -> opentelemetry.jmacd.proto.metrics.v1.RawValue
	10, // 12: opentelemetry.jmacd.proto.metrics.v1.DataPoint.exemplars:type_name -> opentelemetry.jmacd.proto.metrics.v1.RawValue
	11, // 13: opentelemetry.jmacd.proto.metrics.v1.Histogram.buckets:type_name -> opentelemetry.jmacd.proto.metrics.v1.Histogram.Bucket
	12, // 14: opentelemetry.jmacd.proto.metrics.v1.Summary.quantile_values:type_name -> opentelemetry.jmacd.proto.metrics.v1.Summary.ValueAtQuantile
	15, // 15: opentelemetry.jmacd.proto.metrics.v1.RawValue.additional_labels:type_name -> opentelemetry.jmacd.proto.common.v1.StringKeyValue
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_init() }
func file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_init() {
	if File_opentelemetry_jmacd_proto_metrics_v1_metrics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentationLibraryMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Histogram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Summary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Histogram_Bucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Summary_ValueAtQuantile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_goTypes,
		DependencyIndexes: file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_depIdxs,
		EnumInfos:         file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_enumTypes,
		MessageInfos:      file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_msgTypes,
	}.Build()
	File_opentelemetry_jmacd_proto_metrics_v1_metrics_proto = out.File
	file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_rawDesc = nil
	file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_goTypes = nil
	file_opentelemetry_jmacd_proto_metrics_v1_metrics_proto_depIdxs = nil
}
